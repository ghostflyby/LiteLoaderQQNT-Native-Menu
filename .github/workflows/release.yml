name: "tagged-release"

on:
  push:
    paths:
      - 'manifest.json'

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write

    steps:
      - name: "Checkout Repository"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 2 # Ensure we can get the previous version

      - name: "Read versions from manifest"
        id: read-versions
        run: |
          version=$(cat manifest.json | jq -r .version)
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "Version: $version"
          previous_version=$(git show HEAD^:manifest.json | jq -r .version)
          echo "previous-version=previous_version$" >> "$GITHUB_OUTPUT"
          echo "Previous version: $previous_version"

      - name: "pnpm install"
        if: ${{ steps.read-versions.outputs.version != steps.read-versions.outputs.previous-version }}
        uses: pnpm/action-setup@v3
        with:
          version: latest
          run_install: |
              - recursive: true

      - name: "pnpm build"
        if: ${{ steps.read-versions.outputs.version != steps.read-versions.outputs.previous-version }}
        run: |
          echo "Building the project..."
          pnpm run build
          echo "Done!"

      - name: "Zip release files" # Only if the version has been updated
        if: ${{ steps.read-versions.outputs.version != steps.read-versions.outputs.previous-version }}
        run: |
          echo "Creating a release zip file..."
          zip -r "${{github.event.repository.name}}-release.zip" dist/ LICENSE README.md manifest.json
          echo "Done!"

      - name: "Create Release"
        if: ${{ steps.read-versions.outputs.version != steps.read-versions.outputs.previous-version }}
        run: |
          gh release create "${{ steps.read-versions.outputs.version }}" *.zip --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}